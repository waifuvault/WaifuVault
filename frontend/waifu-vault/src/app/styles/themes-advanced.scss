@use "sass:map";
@use "theme-config" as config;
@use "mixins" as mix;
@each $theme-name, $theme-data in config.$themes {
    @if $theme-name == anime {
        :root,
        [data-theme="#{$theme-name}"] {
            @include config.generate-theme($theme-name);
        }
    } @else {
        [data-theme="#{$theme-name}"] {
            @include config.generate-theme($theme-name);
        }
    }
}
body {
    background: var(--bg-primary);
    color: var(--text-primary);
    font-family: config.get-font(inter);
    @include mix.custom-scrollbar();
}
.container {
    position: relative;

    &::before {
        content: "";
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: var(--gradient-bg);
        @include mix.animation(float, slower);
        z-index: -1;
    }
}

// Animations
@keyframes float {
    0%,
    100% {
        transform: translateY(0px) rotate(0deg);
    }
    33% {
        transform: translateY(-20px) rotate(1deg);
    }
    66% {
        transform: translateY(-10px) rotate(-1deg);
    }
}

@keyframes cyberpunk-pulse {
    0% {
        filter: brightness(1) hue-rotate(0deg);
    }
    100% {
        filter: brightness(1.2) hue-rotate(30deg);
    }
}

@keyframes gear-spin {
    from {
        transform: rotate(0deg);
    }
    to {
        transform: rotate(360deg);
    }
}

@keyframes terminal-blink {
    0%,
    50% {
        opacity: 1;
    }
    51%,
    100% {
        opacity: 0.8;
    }
}

@keyframes terminal-scan {
    0% {
        background-position: 0% 0%;
    }
    100% {
        background-position: 0% 100%;
    }
}

// Theme-specific styling
@each $theme-name in map.keys(config.$themes) {
    [data-theme="#{$theme-name}"] {
        // Apply theme-specific effects
        @include mix.theme-effects($theme-name);
        @if $theme-name == cyberpunk {
            .title {
                @include mix.gradient-text(var(--gradient-primary));
                @include mix.glow(var(--text-accent), lg);
                @include mix.animation(cyberpunk-pulse);
            }

            .button {
                box-shadow: 0 0 10px currentColor;
            }
        }

        @if $theme-name == terminal or $theme-name == orangeterminal {
            .title {
                @include mix.gradient-text(var(--gradient-primary));
                @include mix.glow(var(--text-primary));
                @include mix.animation(terminal-blink, normal);

                &::after {
                    content: "â–ˆ";
                    @include mix.animation(terminal-blink);
                    margin-left: config.get-spacing(xs);
                }
            }

            .container::before {
                @include mix.animation(terminal-scan);
            }
        }

        @if $theme-name == steampunk {
            body {
                background: linear-gradient(135deg, #1a1310 0%, #2d1b14 100%);
            }

            .title {
                @include mix.gradient-text(var(--gradient-primary));
                @include mix.glow(rgba(205, 127, 50, 0.5), lg);
                font-weight: bold;

                &::before,
                &::after {
                    content: "âš™";
                    position: absolute;
                    top: 50%;
                    transform: translateY(-50%);
                    font-size: 0.8em;
                    color: var(--text-accent);
                }

                &::before {
                    left: -3rem;
                    @include mix.animation(gear-spin, slower);
                }

                &::after {
                    right: -3rem;
                    animation: gear-spin config.get-duration(slower) linear infinite reverse;
                }
            }

            .subtitle::after {
                content: "ðŸ’¨";
                @include mix.animation(steam-rise);
                margin-left: config.get-spacing(sm);
                display: inline-block;
            }
        }
    }
}

// Utility classes
$utility-properties: (
    m: margin,
    p: padding,
    mt: margin-top,
    mb: margin-bottom,
    ml: margin-left,
    mr: margin-right,
    pt: padding-top,
    pb: padding-bottom,
    pl: padding-left,
    pr: padding-right,
);

@each $prop-short, $prop-full in $utility-properties {
    @each $size-name, $size-value in config.$spacing {
        .#{$prop-short}-#{$size-name} {
            #{$prop-full}: $size-value;
        }
    }
}
@each $size-name, $size-value in config.$radius {
    .rounded-#{$size-name} {
        border-radius: $size-value;
    }
}
.text-center {
    text-align: center;
}
.text-left {
    text-align: left;
}
.text-right {
    text-align: right;
}
@each $breakpoint-name, $breakpoint-value in config.$breakpoints {
    @media (min-width: $breakpoint-value) {
        .hidden-#{$breakpoint-name} {
            display: none !important;
        }
        .block-#{$breakpoint-name} {
            display: block !important;
        }
        .flex-#{$breakpoint-name} {
            display: flex !important;
        }
        .grid-#{$breakpoint-name} {
            display: grid !important;
        }
    }
}
@keyframes steam-rise {
    0%,
    100% {
        transform: translateY(0px);
        opacity: 0.7;
    }
    50% {
        transform: translateY(-5px);
        opacity: 1;
    }
}
