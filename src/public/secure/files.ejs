<!doctype html>
<html lang="en" data-bs-theme="dark">
<head prefix="og: https://ogp.me/ns#">
    <%- include('../snippets/head.ejs'); %>
    <title>Files - WaifuVault</title>
    <link href="/assets/custom/css/index.css" rel="stylesheet">
    <link href="https://cdn.datatables.net/v/bs5/jq-3.7.0/dt-2.1.4/b-3.1.1/b-colvis-3.1.1/fh-4.0.1/r-3.0.2/sc-2.4.3/sl-2.0.5/sr-1.4.1/datatables.min.css"
          rel="stylesheet">
    <link href="https://cdn.datatables.net/rowreorder/1.5.0/css/rowReorder.dataTables.css" rel="stylesheet">
    <link rel="stylesheet" href="/assets/vendor/dropzone/dropzone.min.css" type="text/css" />
    <style>
        table.dataTable td.dt-type-numeric, table.dataTable th.dt-type-numeric {
            text-align: initial;
        }

        #detailsTableBody span {
            word-wrap: break-word;
        }

        #detailsTableBody .bi-clipboard {
            cursor: pointer;
        }

        #detailsTableBody .bi-clipboard:active {
            color: #9aabee;
        }

        :root {
            --dt-row-selected: var(--bs-tertiary-bg-rgb);
        }

        .centerIcon {
            width: 100%;
            height: 100%;
        }

        .centerIcon:before {
            width: 100%;
            height: 100%;
            font-size: 5.0em;
            text-align: center;
            display: block;
            line-height: 100px;
        }

        .dz-image {
            border-radius: 0 !important;
        }

        .btnCopy {
            font-size: 14px;
            text-align: center;
            display: block;
            cursor: pointer !important;
            border: none;
        }

        .dropzone .dz-preview.dz-image-preview {
            background: #fff0;
        }

        .dropzone.dz-drag-hover i {
            opacity: .5;
        }

        .dt-rowReorder-float-parent {
            cursor: grabbing;
        }
    </style>
</head>
<body>
<div>
    <div id="overlay" class="hidden">
        <div id="loader" class="hidden"></div>
    </div>
</div>
<div class="container mt-4">
    <%- include('../snippets/navbar.ejs'); %>
    <div class="row">
        <div class="col-md-12">
            <div class="card border-primary mb-3">
                <div class="card-header">
                    <div>
                        Current Entries
                        <% if(loginType === "bucket") { %>
                            for bucket: <%- bucket.bucketToken; -%>
                        <% } %>
                    </div>
                    <% if(loginType === "bucket" && bucket.type === "PREMIUM") { %>
                        <div class="alert alert-info mt-3">
                            <i class="bi bi-question-circle"></i> This is a <%- bucket.type; -%> bucket, this means that
                            you get unlimited expiry, and unlimited files in albums.
                        </div>
                    <% } %>
                </div>
                <div class="card-body">
                    <div class="d-flex justify-content-between">
                        <div><input type="checkbox" id="selectAll" value="all"> Select All</div>
                        <% if(loginType === "user") { %>
                            <div><button class="btn btn-secondary" id="bucketTools">Bucket Tools</button></div>
                        <% } %>
                    </div>
                    <table class="table submissionsTable datatables display nowrap" data-type="entries">
                        <thead>
                        <tr>
                            <th scope="col">ID</th>
                            <th scope="col">file Name</th>
                            <th scope="col">file Extension</th>
                            <th scope="col">file Size</th>
                            <th scope="col">Created At</th>
                            <th scope="col">expires</th>
                            <th scope="col">mediaType</th>
                            <th scope="col">Views</th>
                            <th scope="col">file Name on system</th>
                            <th scope="col">url</th>
                            <th scope="col">Bucket</th>
                            <th scope="col">file Token</th>
                            <th scope="col">Album</th>
                        </tr>
                        </thead>
                    </table>
                </div>
                <% if(loginType === "bucket") { %>
                    <div class="card-footer d-flex justify-content-between">
                        <button class="btn btn-secondary" id="createAlbum">Create album</button>
                        <button class="btn btn-danger" id="deleteBucket">Delete bucket</button>
                    </div>
                <% } %>
            </div>
        </div>
    </div>
    <div class="row mt-4">
        <% if(loginType === "user") { %>
            <div class="col-md-12">
                <div class="card border-primary mb-3">
                    <div class="card-header">Blocked Ips</div>
                    <div class="card-body">
                        <table class="table blockedIpsTable datatables display nowrap" data-type="ips">
                            <thead>
                            <tr>
                                <th scope="col">ID</th>
                                <th scope="col">ip</th>
                                <th scope="col">Blocked On</th>
                            </tr>
                            </thead>
                        </table>
                    </div>
                </div>
            </div>
        <% } %>
        <% if(loginType === "bucket") { %>
            <div class="col-md-12">
                <div class="card border-primary mb-3">
                    <div class="card-body">
                        <ul class="nav nav-tabs" id="albumTabs" role="tablist">
                        </ul>
                        <div class="tab-content" id="albumTabContent">
                        </div>
                    </div>
                </div>
            </div>
        <% } %>
    </div>
</div>
<!--modals-->
<div id="modals">
    <div class="modal fade" id="fileDetailsModel" tabindex="-1" aria-labelledby="fileDetailsModelLabel"
         aria-hidden="true">
        <div class="modal-dialog modal-xl">
            <div class="modal-content">
                <div class="modal-header">
                    <h1 class="modal-title fs-5" id="fileDetailsModelLabel">File Details</h1>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body" id="fileDetailsModelInfoContent">
                    <div class="container-fluid">
                        <div class="row">
                            <div class="col-md-12 table-responsive">
                                <table class="table table-striped table-hover">
                                    <tbody id="detailsTableBody">

                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" data-bs-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal fade" id="fileUploadModel" tabindex="-1" aria-labelledby="fileUploadModelLabel"
         aria-hidden="true">
        <div class="modal-dialog modal-xl">
            <div class="modal-content">
                <div class="modal-header">
                    <h1 class="modal-title fs-5" id="fileDetailsModelLabel">File Upload</h1>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body" id="fileDetailsModelInfoContent">
                    <div class="container-fluid">
                        <div class="row py-2" id="dropzoneRow">
                            <div class="col-md-12 mb-3">
                                <div class="alert alert-info" role="alert">
                                    You can upload files to your bucket by dragging and dropping them here, or by
                                    browsing for files to upload.
                                    <hr />
                                    If you are upload to an album, it will be processed <strong>AFTER</strong> all files are uploaded. <br/> <br/>
                                    So please do not dismiss this model until all files are uploaded.
                                </div>
                                <div id="uploadDropzone"
                                     class="dropzone rounded mb-4 bg-dark border border-success text-white">
                                    <i class="bi bi-cloud-arrow-up centerIcon"></i>
                                    <div class="fallback">
                                        <input name="file" type="file" />
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="row py-2">
                            <div class="col-md-12">
                                <hr />
                            </div>
                        </div>
                        <div class="row py-2" id="urlRow">
                            <div class="col-md-12">
                                <div class="input-group">
                                    <span class="input-group-text" id="urlLabel">Or upload via url</span>
                                    <input type="text" class="form-control" id="url" aria-label="urlLabel">
                                    <button class="btn btn-primary btn-file-upload" type="button" id="button-addon2">
                                        Upload
                                    </button>
                                </div>
                                <div class="hidden" id="error">
                                    <div class="alert alert-danger" id="errorContent"></div>
                                </div>
                                <div class="hidden" id="success">
                                    <div class="alert alert-success" style="overflow: hidden;text-overflow: ellipsis;">
                                        File from URL Successfully Uploaded <br /> <span id="fileUploadedUrl"></span>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="row py-2">
                            <div class="col-md-12">
                                <hr />
                            </div>
                        </div>
                        <div class="row py-2">
                            <div class="alert alert-info">
                                Any options set here will apply for both upload file and the drag zone
                            </div>
                            <div class="col-md-3">
                                <label for="expires" class="form-label">Expires</label>
                                <input type="text" class="form-control" id="expires" placeholder="Eg 3d, 5h or 10m">
                            </div>
                            <div class="col-md-6">
                                <label for="password" class="form-label">Password</label>
                                <input type="password" class="form-control" id="password" placeholder="Optional">
                            </div>
                        </div>
                        <div class="row py-2">
                            <div class="col-md-3">
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" value="" id="hideFilename">
                                    <label class="form-check-label" for="hideFilename">
                                        Hide Filename
                                    </label>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" value="" id="oneTimeDownload">
                                    <label class="form-check-label" for="oneTimeDownload">
                                        One Time Download
                                    </label>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" data-bs-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>
</div>


<script src="https://cdn.datatables.net/v/bs5/jq-3.7.0/dt-2.1.4/b-3.1.1/b-colvis-3.1.1/fh-4.0.1/r-3.0.2/sc-2.4.3/sl-2.0.5/sr-1.4.1/datatables.min.js"></script>
<script src="https://cdn.datatables.net/rowreorder/1.5.0/js/dataTables.rowReorder.js"></script>
<script src="https://cdn.datatables.net/rowreorder/1.5.0/js/rowReorder.dataTables.js"></script>
<script src="/assets/vendor/dropzone/dropzone.min.js"></script>
<%- include('../snippets/scripts.ejs'); %>
<script>
    const bucketId = <%- loginType === "bucket" ? `"${bucket.bucketToken}";` : "null;"; -%>
</script>
<script>
    Dropzone.autoDiscover = false;
    Site.loadPage(async site => {
        let bucketAlbums = null;
        let dz = null;
        let albumTarget = null
        let lastRowReorder = null;

        function getFilesRemainingTooltipText(curCount, albumFileLimit){
            if(isPremiumBucket){
                return "You can add unlimited files to your album";
            }
            return `Album capacity: ${curCount} out of ${albumFileLimit} files remaining`;
        }

        async function getBucketData() {
            if (!bucketId) {
                return null;
            }
            let resp;
            try {
                site.loading(true);
                resp = await fetch(`${baseUrlSecureRest}/`, {
                    method: "GET",
                    headers: { "Content-Type": "application/json" }
                });
                if (!resp.ok) {
                    const err = await resp.json();
                    const errModal = createErrorModal('getBucketDataErrModal', `error ${err.status} - ${err.message}`);
                    errModal.show();
                    return;
                }
            } finally {
                site.loading(false);
            }

            const json = await resp.json();

            bucketAlbums = json.albums;
            return json;
        }

        const dtMap = new Map();

        let bucketEntries = await getBucketData();

        document.getElementById("filesNav").classList.add("active");

        const uploadModalEl = document.getElementById("fileUploadModel");
        const uploadModal = new bootstrap.Modal(uploadModalEl, { keyboard: false });
        const detailsModal = new bootstrap.Modal(document.getElementById("fileDetailsModel"), { keyboard: false });

        uploadModalEl.addEventListener("hidden.bs.modal", () => {
            if (dz) {
                dz.removeAllFiles();
            }
            albumTarget = null;
        });

        function getFileCounterColor(fileCount) {
            if (fileCount >= albumFileLimit*0.99) {
                return "red";
            }
            if (fileCount > albumFileLimit/2) {
                return "yellow";
            }
            return "green";
        }

        async function deleteAlbum(token, alsoFiles) {
            const resp = await fetch(`${baseUrl}/album/${token}?deleteFiles=${alsoFiles.toString()}`, {
                method: "DELETE",
                headers: { "Content-Type": "application/json" }
            });
            if (!resp.ok) {
                const err = await resp.json();
                const errModal = createErrorModal('deleteAlbumErrModal',`error ${err.status} - ${err.message}`);
                errModal.show();
                return;
            }
            const delObj = await resp.json();
            const addButtons = document.querySelectorAll(".sendToAlbum");
            for (const b of addButtons) {
                if (b.dataset.token === token) {
                    b.remove();
                }
            }
            albumTarget = null;
            return delObj.success;
        }

        async function shareAlbum(token) {
            const resp = await fetch(`${baseUrl}/album/share/${token}`, {
                method: "GET",
                headers: { "Content-Type": "application/json" }
            });
            if (!resp.ok) {
                const err = await resp.json();
                const errModal = createErrorModal('shareAlbumErrModal', `error ${err.status} - ${err.message}`);
                errModal.show();
                return;
            }
            const shareObj = await resp.json();
            return shareObj.description;
        }

        async function unshareAlbum(token) {
            const resp = await fetch(`${baseUrl}/album/revoke/${token}`, {
                method: "GET",
                headers: { "Content-Type": "application/json" }
            });
            if (!resp.ok) {
                const err = await resp.json();
                const errModal = createErrorModal('unshareAlbumErrModal', `error ${err.status} - ${err.message}`);
                errModal.show();
                return;
            }
            const shareObj = await resp.json();
            return shareObj.success;
        }

        async function addFilesToAlbum(token, files) {
            document.getElementById("selectAll").checked = false;
            bucketEntries = await getBucketData();
            const existingTokens = bucketEntries.files.filter(e => e.albumToken === token).map(e => e.token);
            const newTokens = files.filter(f => !existingTokens.includes(f));
            if (existingTokens.length + newTokens.length > albumFileLimit && !isPremiumBucket) {
                const errModal = createErrorModal('addAlbumFilesErrModal', `Album is limited to ${albumFileLimit} files.`);
                errModal.show();
                if (existingTokens.length < albumFileLimit) {
                    files = files.slice(0, albumFileLimit - existingTokens.length);
                } else {
                    return;
                }
            }
            const resp = await fetch(`${baseUrl}/album/${token}/associate`, {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ fileTokens: files })
            });
            if (!resp.ok) {
                const err = await resp.json();
                const errModal = createErrorModal('addAlbumFilesErrModal', `error ${err.status} - ${err.message}`);
                errModal.show();
                return;
            }
            return await resp.json();
        }

        async function removeFilesFromAlbum(token, files) {
            const resp = await fetch(`${baseUrl}/album/${token}/disassociate`, {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ fileTokens: files })
            });
            if (!resp.ok) {
                const err = await resp.json();
                const errModal = createErrorModal('removeAlbumFilesErrModal', `error ${err.status} - ${err.message}</span>`);
                errModal.show();
                return;
            }
            return await resp.json();
        }

        async function setBucketType(token, bucketType) {
            const resp = await fetch(`${baseUrlSecureRest}/setBucketType`, {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ token: token, bucketType: bucketType })
            });
            if (!resp.ok) {
                const err = await resp.json();
                const errModal = createErrorModal('setBucketTypeErrModal', `error ${err.status} - ${err.message}</span>`);
                errModal.show();
                return;
            }
            return await resp.json();
        }

        function resize(entryId) {
            const tables = dtMap.get(entryId);
            for (const table of tables) {
                table.columns.adjust().draw();
            }
        }

        async function buildAddTo() {
            document.querySelectorAll("#addToAlbumPlaceholder > ul")?.forEach(b => b.remove());
            await getBucketData()
            const addBtn = document.getElementById("addToAlbumPlaceholder");
            addBtn.classList.add("dropdown-toggle");
            addBtn.setAttribute("data-bs-toggle", "dropdown");
            addBtn.setAttribute("aria-expanded", "false");
            const menu = document.createElement("ul");
            menu.setAttribute("class", "dropdown-menu");
            menu.setAttribute("aria-labelledby", "addToAlbumBtn");
            menu.setAttribute("id", "albumMenu");
            for (const a of bucketAlbums) {
                const item = document.createElement("li");
                item.innerHTML = `<button class="dropdown-item sendToAlbum" type="button" data-token="${a.token}">${a.name}</button>`;
                menu.appendChild(item);
            }
            addBtn.appendChild(menu);
        }

        async function buildAlbumTabs() {
            const albums = (await getBucketData()).albums;
            const token = albums.length > 0 ? albums[0].token : null;
            const albumTabs = document.getElementById("albumTabs");
            const albumContents = document.getElementById("albumTabContent");
            albumTabs.innerHTML = "";
            albumContents.innerHTML = "";
            if (albums.length === 0) {
                albumTabs.innerHTML = "<li><h3>No Albums Have Been Defined</h3></li>";
                return;
            }
            for (const a of albums) {
                const item = document.createElement("li");
                item.setAttribute("id", `${a.token}`);
                const itemClass = a.token === token ? "nav-link active" : "nav-link";
                const itemSelected = a.token === token ? "true" : "false";
                item.innerHTML = `<button id="${a.token}-tab" class="${itemClass}" type="button" data-bs-toggle="tab" data-bs-target="#${a.token}-tab-pane" role="tab" aria-controls="${a.token}-tab-pane" aria-selected="${itemSelected}">${a.name}</button>`;
                albumTabs.appendChild(item);
                const pane = document.createElement("div");
                const paneClass = a.token === token ? "tab-pane fade show active" : "tab-pane fade";
                pane.setAttribute("class", paneClass);
                pane.setAttribute("id", a.token + "-tab-pane");
                pane.setAttribute("role", "tabpanel");
                pane.setAttribute("aria-labelledby", a.token + "-tab");
                pane.setAttribute("tabindex", "0");
                pane.setAttribute("data-album-token", a.token);
                const contents = buildAlbumCard(a.token, a.publicToken);
                pane.appendChild(contents);
                albumContents.appendChild(pane);
            }
            linkAlbumTabButtons();
        }

        function buildAlbumCard(token, pubToken) {
            const card = document.createElement("div");
            card.setAttribute("class", "card border-primary mb-3");
            const shareButton = `<button class="btn btn-secondary ${pubToken ? "unshareAlbum" : "shareAlbum"}" data-token="${token}">${pubToken ? "Unshare Album" : "Share Album"}</button>`;
            const albumUrl = pubToken ? `<button class="btn btn-success pubUrlButton" data-token="${pubToken}">${mainRul}/album/${pubToken}</button>` : "";
            const fileEntries = `<table class="table albumFilesTable datatables display nowrap" data-type="albumEntries" data-album="${token}">
                                 <thead><tr>
                                    <th scope="col">#</th>
                                    <th scope="col">ID</th>
                                    <th scope="col">file Name</th>
                                    <th scope="col">file Extension</th>
                                    <th scope="col">file Size</th>
                                    <th scope="col">expires</th>
                                    <th scope="col">Views</th>
                                 </tr></thead>
                                 </table>`;
            card.innerHTML = `<div class="card-header d-flex justify-content-between"><div>Current Entries for Album: ${token}</div><div>File Count: <span id="${token}-count" data-bs-toggle="tooltip" data-bs-placement="top" data-bs-title=""></span></div></div>
                              <div class="card-body">${fileEntries}</div>
                              <div id="footer-${token}" class="card-footer d-flex justify-content-between">${shareButton}${albumUrl}<button class="btn btn-danger deleteAlbum" data-token="${token}">Delete Album</button>`;
            return card;
        }

        function updateCardFooter(albumToken) {
            const pubToken = bucketAlbums.filter(x => x.token === albumToken)[0].publicToken;
            const shareButton = `<button class="btn btn-secondary ${pubToken ? "unshareAlbum" : "shareAlbum"}" data-token="${albumToken}">${pubToken ? "Unshare Album" : "Share Album"}</button>`;
            const albumUrl = pubToken ? `<button class="btn btn-success pubUrlButton" data-token="${pubToken}">${mainRul}/album/${pubToken}</button>` : "";
            const footer = document.getElementById(`footer-${albumToken}`);
            footer.innerHTML = `${shareButton}${albumUrl}<button class="btn btn-danger deleteAlbum" data-token="${albumToken}">Delete Album</button>`;
            linkAlbumTabButtons(albumToken);
        }

        function linkAlbumButtons() {
            const albumButtons = document.querySelectorAll(".sendToAlbum");

            async function handleSendToClick(event) {
                const b = event.currentTarget; // Reference to the button
                const albumToken = b.dataset.token;
                const dt = dtMap.get("entries")[0];
                const idArr = [];
                dt.rows({ selected: true }).every(function() {
                    const data = this.data();
                    idArr.push(data.fileToken);
                });
                await addFilesToAlbum(albumToken, idArr);
                dt.ajax.reload();
                await refreshAlbumFiles();
            }

            albumButtons.forEach(b => {
                b.removeEventListener("click", handleSendToClick);
                b.addEventListener("click", handleSendToClick);
            });
        }

        function linkAlbumTabButtons(album) {
            const tabEls = document.querySelectorAll("button[data-bs-toggle=\"tab\"]");
            for (let i = 0; i < tabEls.length; i++) {
                const tab = tabEls[i];
                tab.addEventListener("shown.bs.tab", () => {
                    resize("albumEntries");
                });
            }

            const deleteTarget = album ? `#footer-${album} .deleteAlbum` : ".deleteAlbum";
            const deleteButtons = document.querySelectorAll(deleteTarget);
            deleteButtons.forEach(db => {
                db.addEventListener("click", async () => {
                    async function afterDelete() {
                        await buildAlbumTabs();
                        loadDt("albumEntries");
                        dtMap.get("entries").forEach(t => {
                            t.ajax.reload();
                        });
                    }

                    async function yes() {
                        await deleteAlbum(albumToken, true);
                        document.getElementById(albumToken).remove();
                        await afterDelete();
                    }

                    async function no() {
                        await deleteAlbum(albumToken, false);
                        document.getElementById(albumToken).remove();
                        await afterDelete();
                    }

                    const albumToken = db.dataset.token;
                    const modalElt = createBasicModal("deleteAlbumModal", "Delete Files from Album", "Do you wish to also delete the files (choosing No will return them to the bucket) ?", "Yes", yes, "btn-danger", "No", no, "btn-secondary");
                    modalElt.show();
                });
            });

            const shareTarget = album ? `#footer-${album} .shareAlbum` : ".shareAlbum";
            const shareButtons = document.querySelectorAll(shareTarget);
            shareButtons.forEach(sb => {
                sb.addEventListener("click", async () => {
                    const albumToken = sb.dataset.token;
                    await shareAlbum(albumToken);
                    bucketAlbums = (await getBucketData()).albums;
                    updateCardFooter(albumToken);
                });
            });

            const unshareTarget = album ? `#footer-${album} .unshareAlbum` : ".unshareAlbum";
            const unshareButtons = document.querySelectorAll(unshareTarget);
            unshareButtons.forEach(ub => {
                ub.addEventListener("click", async () => {
                    const albumToken = ub.dataset.token;
                    await unshareAlbum(albumToken);
                    bucketAlbums = (await getBucketData()).albums;
                    updateCardFooter(albumToken);
                });
            });

            const urlButtonTarget = album ? `#footer-${album} .pubUrlButton` : ".pubUrlButton";
            const urlButtons = document.querySelectorAll(urlButtonTarget);
            urlButtons.forEach(ub => {
                ub.addEventListener("click", async () => {
                    const albumToken = ub.dataset.token;
                    navigator.clipboard.writeText(`${mainRul}/album/${albumToken}`).then(() => {
                        const originalText = ub.innerText;
                        ub.innerText = "Copied to Clipboard";
                        setTimeout(() => {
                            ub.innerText = originalText;
                        }, 2000);
                    }).catch(err => {
                        console.error("Failed to copy URL: ", err);
                    });
                });
            });
        }

        async function refreshAlbumFiles() {
            const bucketEntries = await getBucketData();
            bucketAlbums = bucketEntries.albums;
            const bucketFiles = bucketEntries.files;
            const albumList = bucketAlbums.map(e => e.token).reverse();
            const albumDT = dtMap.get("albumEntries");
            for (const tab of albumDT) {
                const curToken = albumList.pop();
                tab.clear();
                tab.rows.add(bucketFiles.filter(e => e.albumToken === curToken));
                tab.draw(false);
                const curCount = bucketFiles.filter(e => e.albumToken === curToken).length;
                const counter = document.getElementById(`${curToken}-count`);
                counter.textContent = `${curCount}/${albumFileLimit}`;
                counter.setAttribute("data-bs-title", getFilesRemainingTooltipText(curCount, albumFileLimit));
                counter.style.color = getFileCounterColor(curCount);
            }
        }

        function loadDt(dtToLoad = null) {
            if (dtMap.has(dtToLoad)) {
                dtMap.get(dtToLoad).forEach(d => d.destroy(true));
                dtMap.delete(dtToLoad);
            } else {
                document.querySelector(".btn-file-upload")?.addEventListener("click", async () => {
                    const url = document.getElementById("url").value;
                    const expires = document.getElementById("expires").value;
                    const password = document.getElementById("password").value;
                    const hideFileName = document.getElementById("hideFilename").checked;
                    const oneTimeDownload = document.getElementById("oneTimeDownload").checked;
                    const uploadButton = document.querySelector(".btn-file-upload");
                    const fileUploadSuccess = document.getElementById("fileUploadedUrl");
                    const album = document.getElementById("uploadToAlbumButton")?.dataset?.token;
                    fileUploadSuccess.innerHTML = null;

                    uploadButton.setAttribute("disabled", "true");
                    uploadButton.classList.add("disabled");

                    let params = `hide_filename=${hideFileName}&one_time_download=${oneTimeDownload}`;
                    if (expires) {
                        params += `&expires=${expires}`;
                    }

                    let fileUploadUrl = `${baseUrl}`;
                    if (bucketId) {
                        fileUploadUrl += `/${bucketId}?${params}`;
                    } else {
                        fileUploadUrl += `?${params}`;
                    }

                    const formData = new FormData();
                    formData.append("url", url);

                    if (password) {
                        formData.append("password", password);
                    }
                    Site.loading(true);
                    let resp;
                    try {
                        resp = await fetch(fileUploadUrl, {
                            method: "PUT",
                            body: formData,
                        });
                    } catch (e) {
                        alert(e.message);
                        return null;
                    } finally {
                        Site.loading(false);
                    }
                    const json = await resp.json();

                    if (resp.ok) {
                        const url = encodeURI(json.url);
                        const btn = document.createElement("button");
                        btn.className = "btn btn-sm btn-outline-primary mt-3 d-block";
                        btn.addEventListener("click", () => navigator.clipboard.writeText(url));
                        btn.textContent = "Copy to clipboard";

                        const anchor = document.createElement("a");
                        anchor.setAttribute("target", "_blank");
                        anchor.setAttribute("href", url);
                        anchor.textContent = url;
                        fileUploadSuccess.append(anchor);
                        anchor.after(btn);

                        if (album) {
                            const dt = dtMap.get("entries")[0];
                            await addFilesToAlbum(album, [json.token]);
                            dt.ajax.reload();
                            await refreshAlbumFiles();
                        }

                        Site.showSuccess();
                    } else {
                        if (json.message) {
                            Site.showError(json.message);
                        } else {
                            Site.showSuccess("Network Error.");
                        }
                    }

                    reloadTable(["entries"]);
                    uploadButton.removeAttribute("disabled");
                    uploadButton.classList.remove("disabled");
                });
            }


            function initDropzone(maxfiles = null) {
                dz = new Dropzone("#uploadDropzone", {
                    url: "/rest",
                    method: "PUT",
                    uploadMultiple: false,
                    addRemoveLinks: false,
                    maxThumbnailFilesize: 50,
                    maxFilesize: <%- FILE_SIZE_UPLOAD_LIMIT_MB; -%>,
                    maxFiles: maxfiles,
                });
                dz.on("sending", (file, xhr, formData) => {
                    const password = document.getElementById("password").value;
                    if (password) {
                        formData.append("password", password);
                    }
                });
                dz.on("processing", function() {
                    const expires = document.getElementById("expires").value;
                    const hideFileName = document.getElementById("hideFilename").checked;
                    const oneTimeDownload = document.getElementById("oneTimeDownload").checked;
                    let params = `hide_filename=${hideFileName}&one_time_download=${oneTimeDownload}`;
                    if (expires) {
                        params += `&expires=${expires}`;
                    }

                    let fileUploadUrl = baseUrl;
                    if (bucketId) {
                        fileUploadUrl += `/${bucketId}?${params}`;
                    } else {
                        fileUploadUrl += `?${params}`;
                    }

                    this.options.url = fileUploadUrl;
                });
                dz.on("complete", file => {
                    const dzPreview = file.previewElement;
                    const response = JSON.parse(file.xhr.response);
                    if (file.status === "success") {
                        const btn = document.createElement("a");
                        btn.classList.add("btn-primary", "btn-sm", "btn", "btnCopy", "rounded-0");
                        btn.textContent = "Copy URL";
                        btn.addEventListener("click", () => {
                            navigator.clipboard.writeText(response.url);
                            btn.textContent = "URL Copied!";
                            setTimeout(() => {
                                btn.textContent = "Copy URL";
                            }, 1000);
                        });
                        btn.setAttribute("href", "javascript:undefined;")
                        dzPreview.appendChild(btn);
                    } else {
                        file.previewElement.querySelector('.dz-error-message>span').textContent = response.message;
                    }
                });
                dz.on("queuecomplete", async function() {
                    if (albumTarget) {
                        const files = this.files;
                        const tokens = files.filter(f => f.status === 'success').map(f => JSON.parse(f.xhr.responseText).token);
                        const dt = dtMap.get("entries")[0];
                        await addFilesToAlbum(albumTarget, tokens);
                        dt.ajax.reload();
                        await refreshAlbumFiles();
                    }
                    reloadTable(["entries"]);
                });
                dz.on("maxfilesreached", file => {
                    const modalElt = createBasicModal("maxFilesModal", "Maximum Album Files Reached", `You have reached the album file limit of ${albumFileLimit} files`);
                    modalElt.show();
                });
            }

            function sizeAsMB() {
                return function(data, type, row) {
                    if (type === "display") {
                        const sizeKB = Math.floor(data / 1024);
                        const sizeMB = Math.floor(sizeKB / 1024);
                        if (data < 1024) {
                            return `${data} B`;
                        }
                        if (sizeKB < 1024) {
                            return `${sizeKB} KB`;
                        }
                        return `${sizeMB} MB`;
                    }
                    return data;
                };
            }

            function addDetailInfo(detailArr) {
                const copyButtons = ["IP", "URL", "Original Name"];
                document.getElementById("detailsTableBody").innerHTML = detailArr.map(details => {
                    const header = details[0];
                    let data = details[1];
                    if (header === "URL") {
                        data = `<a href='${data}' target='_blank'><span>${data}</span></a>`;
                    } else {
                        data = `<span>${data}</span>`;
                    }
                    if (copyButtons.includes(header)) {
                        data += `<i title="Copy value to clipboard" class='bi bi-clipboard ms-1' onclick='navigator.clipboard.writeText("${encodeURI(details[1])}");'></i>`;
                    }
                    return `<tr><th>${header}</th><td>${data}</td></tr>`;
                }).join("");
            }

            function renderNullField() {
                return function(data, type, row) {
                    return data ?? "N/A";
                };
            }

            function renderAlbumField() {
                return function(data, type, row) {
                    return data?.name ?? "N/A";
                };
            }

            function customDate() {
                return function(data, type, row) {
                    if (type === "display") {
                        return new Date(Date.parse(data)).toLocaleString();
                    }
                    return data;
                };
            }

            function shortenHash() {
                return function(data, type, row) {
                    if (type === 'display') {
                        return ellipsis(data);
                    }
                    return data;
                }
            }

            function ellipsis(str) {
                if (str.length <= 8) {
                    return str;
                }
                return `${str.slice(0, 4)}...${str.slice(-4)}`;
            }

            function fileEmbedRender() {
                return function(data, type, row) {
                    const url = row.url;
                    const notProtected = row.fileProtectionLevel === "None" && !row.oneTimeDownload;
                    const ext = url.match(/\.(mp4|ogg|webm)$/)?.[1];
                    let filename = data || `${row.fileName}`; // filename here is originalFileName. but hidden files do not have it, so get the filename on disk
                    if (ext && !data) {
                        filename += `.${ext}`;
                    }
                    if (notProtected) {
                        if (url.match(/\.(jpeg|jpg|gif|png|webp)$/) != null) {
                            const imageTag = `<img width='auto' height='240' src='${url}' />`;
                            return `<span class="text-primary" data-bs-toggle="tooltip" data-bs-html="true" data-bs-placement="right" data-bs-title="${imageTag}">${filename}</span>`;
                        } else if (url.match(/\.(mp4|ogg|webm)$/) != null) {
                            let type = `video/${ext}`;
                            const videoTag = `<video width='auto' height='240' autoplay><source src='${url}' type='${type}'></video>`;
                            return `<span class="text-primary" data-bs-toggle="tooltip" data-bs-html="true" data-bs-placement="right" data-bs-title="${videoTag}">${filename}</span>`;
                        } else if (url.match(/\.(pdf)$/) != null) {
                            const pdfTag = `<embed class='pdf' width='auto' height='240' src='${url}'>`;
                            return `<span class="text-primary" data-bs-toggle="tooltip" data-bs-html="true" data-bs-placement="right" data-bs-title="${pdfTag}">${filename}</span>`;
                        }
                    }
                    return `<span>${filename}</span>`;
                };
            }


            function getDataMapping(type) {
                switch (type) {
                    case "ips":
                        return [
                            { data: "id" },
                            { data: "ip", render: shortenHash() },
                            { data: "createdAt", render: customDate() }
                        ];
                    case "albumEntries":
                        return [
                            { data: "addedToAlbumOrder"},
                            { data: "id" },
                            { data: "originalFileName", className: "col-filename", render: fileEmbedRender() },
                            { data: "fileExtension", className: "col-fileext" },
                            { data: "fileSize", render: sizeAsMB() },
                            { data: "expiresString", render: renderNullField() },
                            { data: "views" }
                        ];
                    case "entries":
                        return [
                            { data: "id" },
                            { data: "originalFileName", className: "col-filename", render: fileEmbedRender() },
                            { data: "fileExtension", className: "col-fileext" },
                            { data: "fileSize", render: sizeAsMB() },
                            { data: "createdAt", render: customDate() },
                            { data: "expires", render: renderNullField() },
                            { data: "mediaType", render: renderNullField() },
                            { data: "views" },
                            { data: "fileName" },
                            { data: "url" },
                            { data: "bucket", render: renderNullField() },
                            { data: "fileToken" },
                            { data: "album", render: renderAlbumField() }
                        ];
                }
            }

            async function unBanIps(ips) {
                Site.loading(true);
                let response;
                try {
                    response = await fetch(`${baseUrlSecureRest}/unblockIps`, {
                        method: "POST",
                        headers: {
                            "Accept": "application/json",
                            "Content-Type": "application/json"
                        },
                        body: JSON.stringify(ips)
                    });
                } catch (e) {
                    const errModal = createErrorModal('unbanIpsErrModal', e.message);
                    errModal.show();
                    return false;
                } finally {
                    Site.loading(false);
                }
                const responseStatus = response.status;
                const responseJson = await response.json();
                if (responseStatus !== 200) {
                    const errModal = createErrorModal('unbanIpsJsonErrModal', responseJson.message);
                    errModal.show();
                    throw new Error(responseJson.message);
                }
            }

            async function banIp(ip, removeRelatedData = false) {
                Site.loading(true);
                let response;
                try {
                    response = await fetch(`${baseUrlSecureRest}/blockIp?removeRelatedData=${removeRelatedData}`, {
                        method: "POST",
                        headers: { "Content-Type": "application/x-www-form-urlencoded" },
                        body: new URLSearchParams({ ip })
                    });
                } catch (e) {
                    const errModal = createErrorModal('banIpsErrModal', e.message);
                    errModal.show();
                    return false;
                } finally {
                    Site.loading(false);
                }
                const responseStatus = response.status;
                const responseJson = await response.json();
                if (responseStatus !== 200) {
                    const errModal = createErrorModal('unbanIpsErrModal', responseJson.message);
                    errModal.show();
                    throw new Error(responseJson.message);
                }
            }

            async function deleteEntry(ids) {
                document.getElementById("selectAll").checked = false;
                Site.loading(true);
                let response;
                try {
                    response = await fetch(`${baseUrlSecureRest}/deleteEntries`, {
                        method: "DELETE",
                        headers: {
                            "Accept": "application/json",
                            "Content-Type": "application/json"
                        },
                        body: JSON.stringify(ids)
                    });
                } catch (e) {
                    const errModal = createErrorModal('deleteEntryErrModal', e.message);
                    errModal.show();
                    return false;
                } finally {
                    Site.loading(false);
                }
                const responseStatus = response.status;
                const responseJson = await response.json();
                if (responseStatus !== 200) {
                    const errModal = createErrorModal('deleteEntryErrModal', responseJson.message);
                    errModal.show();
                    throw new Error(responseJson.message);
                }
            }

            async function swapOrder(albumToken, id, oldPos, newPos) {
                let resp;
                try {
                    site.loading(true);
                    resp = await fetch(`${baseUrl}/album/${albumToken}/swapFileOrder/${id}/${oldPos}/${newPos}`, {
                        method: "POST"
                    });
                    if (!resp.ok) {
                        const err = await resp.json();
                        const errModal = createErrorModal('swapFilesErrModal', `error ${err.status} - ${err.message}`);
                        errModal.show();
                        return;
                    }
                } finally {
                    site.loading(false);
                }
            }

            function getButtons(type) {
                const buttons = [];
                if (type === "entries") {
                    buttons.push({
                            extend: "selected",
                            text: "Delete file",
                            attr: { id: "deleteFilesButton" },
                            action: async (e, dt) => {
                                async function yes() {
                                    const idArr = [];
                                    dt.rows({ selected: true }).every(function() {
                                        const data = this.data();
                                        idArr.push(data.id);
                                    });
                                    await deleteEntry(idArr);
                                    reloadTable(["entries"]);
                                    if (bucketId) {
                                        await refreshAlbumFiles();
                                    }
                                }

                                async function no() {
                                    return;
                                }

                                const modalElt = createBasicModal("deleteFilesModal", "Delete Files", "Are you sure you want to delete these files ?", "Yes", yes, "btn-danger", "No", no, "btn-secondary");
                                modalElt.show();
                            }
                        },
                            <% if(loginType === "user") { %>
                        {
                            extend: "selectedSingle",
                            text: "Ban IP",
                            attr: { id: "banIpButton" },
                            action: async (e, dt) => {
                                const selectedRow = dt.row({ selected: true }).data();
                                if (!selectedRow.ip) {
                                    return;
                                }
                                const accepted = confirm("Are you sure you want to ban this IP?");
                                if (!accepted) {
                                    return;
                                }
                                const deleteRelatedData = confirm("Do you want to also delete all related data?\nPress 'Cancel' for no and 'Ok' for Yes");
                                const ip = selectedRow.ip;
                                await banIp(ip, deleteRelatedData);
                                reloadTable(["entries", "ips"]);
                            }
                        },
                            <% } %>
                        {
                            extend: "selectedSingle",
                            text: "Details",
                            attr: { id: "detailsButton" },
                            action: async (e, dt) => {
                                const selectedRow = dt.row({ selected: true }).data();
                                const detailArr = [
                                    ["ID", selectedRow.id],
                                    ["File Name", selectedRow.fileName],
                                    ["File Ext", selectedRow.fileExtension],
                                    ["Original Name", selectedRow.originalFileName],
                                    ["Media Type", selectedRow.mediaType],
                                    ["File Size", selectedRow.fileSize],
                                    ["File Protection Level", selectedRow.fileProtectionLevel],
                                    ["Created At", customDate()(selectedRow.createdAt, "display", selectedRow)],
                                    ["Expires", selectedRow.expires ?? "N/A"],
                                    ["IP", selectedRow.ip ?? "N/A"],
                                    ["URL", selectedRow.url],
                                    ["Bucket", selectedRow.bucket ?? "N/A"]
                                ];
                                addDetailInfo(detailArr);
                                detailsModal.show();
                            }
                        },
                        {
                            extend: "selectedSingle",
                            text: "Download file",
                            attr: { id: "downloadFileButton" },
                            action: async (e, dt) => {
                                const selectedRow = dt.row({ selected: true }).data();
                                const url = selectedRow.url;
                                window.open(url, "_blank");
                                if (selectedRow.oneTimeDownload) {
                                    setTimeout(function() {
                                        reloadTable(["entries"]);
                                    }, 1000);
                                }
                            }
                        },
                        {
                            text: "Upload file",
                            attr: { id: "uploadFileButton" },
                            action: async (e, dt) => {
                                albumTarget = null;
                                dz.destroy();
                                initDropzone();
                                uploadModal?.show();
                            }
                        },
                            <% if(loginType !== "user") { %>
                        {
                            extend: "selected",
                            text: "Add to Album",
                            attr: { id: "addToAlbumPlaceholder" }
                        }
                        <% } %>
                    );
                } else if (type === "ips") {
                    buttons.push({
                        extend: "selected",
                        text: "Un-ban",
                        attr: { id: "downloadFileButton" },
                        action: async (e, dt) => {
                            const accepted = confirm("Are you sure you want to remove the ban for the selected ip(s)?");
                            if (!accepted) {
                                return;
                            }
                            const ipArr = [];
                            dt.rows({ selected: true }).every(function() {
                                const data = this.data();
                                ipArr.push(data.ip);
                            });
                            await unBanIps(ipArr);
                            dt.rows({ selected: true }).remove().draw(false);
                            reloadTable(["entries"]);
                        }
                    });
                } else if (type === "albumEntries") {
                    buttons.push({
                        extend: "selected",
                        text: "Remove file",
                        attr: { id: "removeFilesButton" },
                        action: async (e, dt) => {
                            const idArr = [];
                            const albumArr = [];
                            dt.rows({ selected: true }).every(function() {
                                const data = this.data();
                                idArr.push(data.token);
                                albumArr.push(data.albumToken);
                            });
                            await removeFilesFromAlbum(albumArr[0], idArr);
                            dt.rows({ selected: true }).remove().draw(false);
                            reloadTable(["entries"]);
                            await refreshAlbumFiles();
                        }},
                        {
                        text: "Upload file",
                            attr: { id: "uploadAlbumFileButton" },
                        action: async (e, dt) => {
                            const tabPane = e.target.closest(".tab-pane");
                            if (tabPane) {
                                albumTarget = tabPane.getAttribute("data-album-token");
                                if (!isPremiumBucket && albumTarget) {
                                    bucketEntries = await getBucketData();
                                    const currentFiles = bucketEntries.files.filter(e => e.albumToken === albumTarget).length;
                                    const filesLeft = albumFileLimit - currentFiles;
                                    dz.destroy();
                                    initDropzone(filesLeft > 0 ? filesLeft : 0);
                                }
                            }
                            uploadModal?.show();
                        }}
                    );
                }
                return buttons;
            }

            function reloadTable(types) {
                for (const type of types) {
                    const tables = dtMap.get(type);
                    tables?.forEach(t => {
                        t.ajax.reload();
                    });
                }
            }

            function initSelectListeners(type) {
                function disableButtonsOnSelection(value, buttons) {
                    if (value) {
                        buttons.disable();
                    } else {
                        buttons.enable();
                    }
                }

                const table = dtMap.get(type);
                table.forEach(t => {
                    if (type === "albumEntries") {
                        t.on("row-reorder", async function (e, diff, edit) {
                            if(e.timeStamp === lastRowReorder) {
                                return;
                            }
                            if (edit.triggerRow.selected()) {
                                edit.triggerRow.deselect();
                            } else {
                                edit.triggerRow.select();
                            }
                            for (let i = 0; i < diff.length; i++) {
                                let rowData = t.row(diff[i].node).data();
                                await swapOrder(rowData.albumToken, rowData.id, diff[i].oldData, diff[i].newData);
                            }
                            lastRowReorder = e.timeStamp;
                        })
                    }
                    if (type === "entries" || type === "albumEntries") {
                        t.on("select", function(e, dt, type, indexes) {
                            if (type === "row") {
                                const data = t
                                    .rows(indexes)
                                    .data()
                                    .pluck("ipBanned");
                                disableButtonsOnSelection(data.get(0), t.buttons(["#banIpButton"]));
                            }
                        });
                    }
                    t.on("draw.dt", () => {
                        site.initTooltips();
                    });
                });
            }

            async function loadDt(el) {
                const type = el.dataset.type;
                let url = null;
                switch (type) {
                    case "ips":
                        url = `${baseUrlSecureRest}/blockedIps`;
                        break;
                    case "albumEntries":
                    case "entries":
                        url = `${baseUrlSecureRest}/datatablesEntries`;
                }
                const dtOpts = {
                    layout: {
                        top2Start: "buttons",
                        topStart: {
                            pageLength: {
                                menu: [10, 25, 50, 100]
                            }
                        },
                        topEnd: {
                            search: {
                                placeholder: "Type search here"
                            }
                        },
                        bottomEnd: "paging"
                    },
                    stateSave: true,
                    paging: true,
                    fixedHeader: {
                        header: true
                    },
                    responsive: true,
                    autoWidth: false,
                    scrollY: 600,
                    scrollX: false,
                    scrollCollapse: true,
                    select: {
                        style: "multi"
                    },
                    columns: getDataMapping(type),
                    buttons: getButtons(type)
                };
                if (type === "entries") {
                    dtOpts.ajax = url;
                    dtOpts.processing = true;
                    dtOpts.serverSide = true;
                    dtOpts.language = {
                        loadingRecords: "No data available"
                    };
                } else if (type === "albumEntries") {
                    dtOpts.data = bucketEntries.files.filter(e => e.albumToken === el.dataset.album);
                    dtOpts.rowReorder = { dataSrc: "addedToAlbumOrder", selector: "tr" };
                    const curCount = dtOpts.data.length;
                    const counter = document.getElementById(`${el.dataset.album}-count`);
                    counter.textContent = `${curCount}/${albumFileLimit}`;
                    counter.setAttribute("data-bs-title",  getFilesRemainingTooltipText(curCount, albumFileLimit));
                    counter.style.color = getFileCounterColor(curCount);
                } else if (type === "ips") {
                    dtOpts.ajax = {
                        url,
                        dataSrc: ""
                    };
                }
                site.loading(true);
                const table = new DataTable(el, dtOpts);
                site.loading(false);
                if (dtMap.has(type)) {
                    dtMap.get(type).push(table);
                } else {
                    dtMap.set(type, [table]);
                }
                initSelectListeners(type);
            }

            if (dtToLoad === "albumEntries") {
                document.querySelectorAll("#albumTabContent .datatables").forEach(e => loadDt(e));
            } else {
                $(".datatables").each(async function() {
                    await loadDt($(this)[0]);
                });
                if (!dz) {
                    initDropzone();
                }
            }
        }

        document.getElementById("deleteBucket")?.addEventListener("click", async () => {
            async function yes() {
                let resp;
                try {
                    site.loading(true);
                    resp = await fetch(`${baseUrl}/bucket/${bucketId}`, {
                        method: "DELETE"
                    });
                    if (!resp.ok) {
                        const err = await resp.json();
                        const errModal = createErrorModal('deleteBucketErrModal', `error ${err.status} - ${err.message}`);
                        errModal.show();
                        return;
                    }
                } finally {
                    site.loading(false);
                }
                window.location.replace(mainRul);
            }

            async function no() {
                return;
            }

            const modalElt = createBasicModal("deleteBucketModal", "Delete Bucket", "Are you sure you want to delete this bucket?<br/>All files associated with it will also be deleted.", "Yes", yes, "btn-danger", "No", no, "btn-secondary");
            modalElt.show();
        });

        document.getElementById("createAlbum")?.addEventListener("click", async () => {
            async function yes() {
                const albumName = document.getElementById("newAlbumName");
                let resp;
                try {
                    site.loading(true);
                    resp = await fetch(`${baseUrl}/album/${bucketId}`, {
                        method: "POST",
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify({ name: albumName.value })
                    });
                    if (!resp.ok) {
                        const err = await resp.json();
                        const errModal = createErrorModal('createAlbumErrModal', `error ${err.status} - ${err.message}`);
                        errModal.show();
                        return;
                    }
                } finally {
                    site.loading(false);
                }
                await buildAddTo();
                const albumObj = await resp.json();
                await buildAlbumTabs();
                loadDt("albumEntries");
                await buildAddTo();
                linkAlbumButtons();
            }

            const getnameModal = createBasicModal("getAlbumNameModal", "Album Name", "<form><label for=\"newAlbumName\" class=\"form-label\">Enter New Album Name</label><input type=\"text\" class=\"form-control\" id=\"newAlbumName\"></form>", "Create Album", yes, "btn-primary");
            getnameModal.show();
        });

        if (bucketId) {
            await buildAlbumTabs();
            loadDt();
            if (bucketAlbums && bucketAlbums.length > 0) {
                resize("albumEntries");
            }
            await buildAddTo();
            linkAlbumButtons();
        } else {
            loadDt();
        }

        document.getElementById("selectAll").addEventListener("click", function () {
            const dt = dtMap.get("entries")[0];
            if (this.checked) {
                dt.rows().select();
            } else {
                dt.rows().deselect();
            }
        });

        document.getElementById("bucketTools")?.addEventListener("click", async () => {
            let bucketToken;
            async function promoteYes() {
                await setBucketType(bucketToken, "PREMIUM");
            }

            async function demoteYes() {
                await setBucketType(bucketToken, "NORMAL");
            }

            async function generalNo() {
                return;
            }

            async function yes() {
                bucketToken = document.getElementById("bucketToken").value;
                let resp;
                try {
                    site.loading(true);
                    resp = await fetch(`${baseUrlSecureRest}/getBucketType/${bucketToken}`, {
                        method: "GET",
                        headers: { "Content-Type": "application/json" },
                    });
                    if (!resp.ok) {
                        const err = await resp.json();
                        const errModal = createErrorModal('getBucketErrModal', `error ${err.status} - ${err.message}`);
                        errModal.show();
                        return;
                    }
                    const bucketType = await resp.text();
                    if (bucketType === "NORMAL") {
                        const promoteModal = createBasicModal("promoteBucketModal", "Promote Bucket", `Bucket ${bucketToken} is a NORMAL bucket.<br/><br/>Do you want to make it a PREMIUM bucket ?`, "Yes", promoteYes, "btn-danger", "No", generalNo, "btn-secondary");
                        promoteModal.show();
                        return;
                    }
                    if (bucketType === "PREMIUM") {
                        const demoteModal = createBasicModal("demoteBucketModal", "Demote Bucket", `Bucket ${bucketToken} is a PREMIUM bucket.<br/><br/>Do you want to make it a NORMAL bucket ?`, "Yes", demoteYes, "btn-danger", "No", generalNo, "btn-secondary");
                        demoteModal.show();
                    }
                } finally {
                    site.loading(false);
                }
            }

            const getBucketModal = createBasicModal("getBucketModal", "Bucket Token", "<form><label for=\"bucketToken\" class=\"form-label\">Enter Bucket Token</label><input type=\"text\" class=\"form-control\" id=\"bucketToken\"></form>", "Get Bucket Type", yes, "btn-primary");
            getBucketModal.show();
        })
    });
</script>
</body>
</html>
